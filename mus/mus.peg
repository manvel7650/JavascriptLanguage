{
	function buildTree(tagName, a) {
		var result = {tag: tagName, left: a[0]}, temp = result, start = 1, end = a.length - 1;
		for(var i=start; i<end; i++) {
			temp.right = {tag: tagName, left: a[i]};
			temp = temp.right;
		}
		temp.right = a[end];
		return result;
	};
}

start = tag 

tag = ignoreChar* tag:(repeat / seq / par / note / rest) ignoreChar* {return tag;}

repeat = "[" count:[0-9]+ "]" tag:tag {return {tag: 'repeat', section: tag, count: parseInt(count.join("", 10))};}

seq = "{" tags:(start:(tag:tag ',' {return tag;})* last:tag {return start.concat(last);}) "}" {return buildTree('seq', tags);}

par = "{" tags:(start:(tag:tag '|' {return tag;})* last:tag {return start.concat(last);}) "}" {return buildTree('par', tags);}

note = pitch:[A-G]i octave:[0-9] duration:duration {return {tag: 'note', pitch: "" + pitch.toLowerCase() + octave, dur: duration};}

rest = "_" duration:duration {return {tag: 'rest', dur: duration};}

duration = ":" duration:[0-9]+ {return parseInt(duration.join("", 10));}

ignoreChar = " " / "\t" / "\r\n" / "\n"